package database;

import util.TupleStringInt;

import java.io.BufferedReader;
import java.io.FileNotFoundException;
import java.io.FileReader;
import java.io.IOException;
import java.util.*;

/**
 * Controls the database. Uses CSV files generated by google analytics. These CSV files should contain the following in the following order:
 * Search Term,Total Unique Searches,Results Pageviews / Search,% Search Exits,% Search Refinements,Time after Search,Average Search Depth.
 * These CSV files are edited in such a way that only the actual data is left. the comments are out, as well as the names of the columns and the day index, total unique searches part.
 *
 * @author Tim
 */
public class CSVControl implements IDBControl {
    private static final String DATALOCATION = "./csv/";
    private static final String[] FILENAMES = {"Data1.csv", "Data2.csv", "Data3.csv", "Data4.csv"};

    public CSVControl() {

    }

    @Override
    public HashMap<String,Integer> getData() {
        Set<String> rawData = new HashSet<String>();

        for (String file : FILENAMES) {
            rawData.addAll(readCSV(DATALOCATION + file));
        }

        Set<String[]> filteredData = filter(rawData);

        HashMap<String,Integer> data = process(filteredData);

        return data;
    }

    private HashMap<String,Integer> process(Set<String[]> filteredData) {
        HashMap<String,Integer> data = new HashMap<>();

        for (String[] dl : filteredData) {
            int n = 0;
            try {
                n = Integer.parseInt(dl[1].replace("\"", "").replace(",", ""));
            }catch (NumberFormatException e){
                System.out.println();
            }
            double r = Double.parseDouble(dl[2].replace("%", ""));
            double p = 100 - r;
            int weight = IDBControl.calcWeight(n, p);

            data.put(dl[0].replace("\"", ""), weight);
        }

        return data;
    }

    /**
     * @param rawData
     * @return a set of String arrays with a length of 3.
     */
    private Set<String[]> filter(Set<String> rawData) {
        final String SPLITTER = ",(?=([^\"]*\"[^\"]*\")*[^\"]*$)"; // CSV = Comma Separated Values
        Set<String[]> filteredData = new HashSet<>();

        for (String line : rawData) {
            String[] splitLine = line.split(SPLITTER);
            filteredData.add(new String[]{splitLine[0], splitLine[1], splitLine[4]});
        }

        return filteredData;
    }

    private Set<String> readCSV(String path) {
        BufferedReader br = null;
        String line = "";
        Set<String> rawData = new HashSet<>();

        try {
            br = new BufferedReader(new FileReader(path));

            while ((line = br.readLine()) != null) {
                    rawData.add(line);
            }
        } catch (IOException e) {
            System.out.println("Error in CSVControl#readCSV");
            e.printStackTrace();
        } finally {
            if (br != null) {
                try {
                    br.close();
                } catch (IOException e) {
                    System.out.println("Error in CSVControl#readCSV");
                    e.printStackTrace();
                }
            }
        }
        return rawData;
    }
}
